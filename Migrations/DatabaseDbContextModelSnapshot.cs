// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neptune.Data;

namespace Neptune.Migrations
{
    [DbContext(typeof(DatabaseDbContext))]
    partial class DatabaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Neptune.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("created")
                        .HasColumnType("TEXT");

                    b.Property<int>("datatype")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("options");
                });

            modelBuilder.Entity("Neptune.Models.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("created")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("implemented")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("parameter");
                });

            modelBuilder.Entity("Neptune.Models.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("created")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.Property<string>("updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("username");

                    b.ToTable("scripts");
                });

            modelBuilder.Entity("Neptune.Models.User", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.Property<bool>("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("created")
                        .HasColumnType("TEXT");

                    b.Property<string>("display_name")
                        .HasColumnType("TEXT");

                    b.Property<int>("permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("updated")
                        .HasColumnType("TEXT");

                    b.HasKey("username");

                    b.ToTable("user");
                });

            modelBuilder.Entity("OptionParameter", b =>
                {
                    b.Property<int>("optionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("parameterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("optionsId", "parameterId");

                    b.HasIndex("parameterId");

                    b.ToTable("OptionParameter");
                });

            modelBuilder.Entity("ParameterParameter", b =>
                {
                    b.Property<int>("parameter_childId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("parameter_parentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("parameter_childId", "parameter_parentId");

                    b.HasIndex("parameter_parentId");

                    b.ToTable("ParameterParameter");
                });

            modelBuilder.Entity("ParameterScript", b =>
                {
                    b.Property<int>("parameterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("scriptsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("parameterId", "scriptsId");

                    b.HasIndex("scriptsId");

                    b.ToTable("ParameterScript");
                });

            modelBuilder.Entity("Neptune.Models.Script", b =>
                {
                    b.HasOne("Neptune.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("username");

                    b.Navigation("user");
                });

            modelBuilder.Entity("OptionParameter", b =>
                {
                    b.HasOne("Neptune.Models.Option", null)
                        .WithMany()
                        .HasForeignKey("optionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neptune.Models.Parameter", null)
                        .WithMany()
                        .HasForeignKey("parameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParameterParameter", b =>
                {
                    b.HasOne("Neptune.Models.Parameter", null)
                        .WithMany()
                        .HasForeignKey("parameter_childId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neptune.Models.Parameter", null)
                        .WithMany()
                        .HasForeignKey("parameter_parentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParameterScript", b =>
                {
                    b.HasOne("Neptune.Models.Parameter", null)
                        .WithMany()
                        .HasForeignKey("parameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neptune.Models.Script", null)
                        .WithMany()
                        .HasForeignKey("scriptsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
